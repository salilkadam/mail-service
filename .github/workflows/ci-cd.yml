name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/mail-service ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: docker4zerocool/mail-service-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/mail-service'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Trigger ArgoCD Sync
      run: |
        # Use ArgoCD REST API to trigger sync
        ARGOCD_SERVER="${{ secrets.ARGOCD_SERVER }}"
        ARGOCD_TOKEN="${{ secrets.ARGOCD_PASSWORD }}"
        
        echo "Triggering ArgoCD sync via REST API..."
        
        # Trigger sync using ArgoCD REST API
        curl -X POST \
          -H "Authorization: Bearer $ARGOCD_TOKEN" \
          -H "Content-Type: application/json" \
          "$ARGOCD_SERVER/api/v1/applications/mail-service-production/sync" \
          -d '{"prune": true, "dryRun": false, "strategy": {"hook": {"force": true}}}'
        
        echo "ArgoCD sync triggered successfully!"
