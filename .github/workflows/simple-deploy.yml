name: Simple Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: docker4zerocool/mail-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update deployment images
      run: |
        # Update backend deployment with new image
        kubectl patch deployment mail-service-backend -n mail-service-prod -p '{"spec":{"template":{"spec":{"containers":[{"name":"mail-service-backend","image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"}]}}}}'
        
        # Update frontend deployment with new image
        kubectl patch deployment mail-service-frontend -n mail-service-prod -p '{"spec":{"template":{"spec":{"containers":[{"name":"mail-service-frontend","image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"}]}}}}'
      env:
        KUBECONFIG: /tmp/kubeconfig

    - name: Setup kubectl
      run: |
        # Create kubeconfig from cluster info
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > /tmp/kubeconfig
        chmod 600 /tmp/kubeconfig
      env:
        KUBECONFIG: /tmp/kubeconfig

    - name: Trigger ArgoCD sync
      run: |
        # Force ArgoCD to sync the application
        kubectl patch application mail-service-production -n argocd --type merge -p '{"operation":{"sync":{"syncOptions":["CreateNamespace=true","PrunePropagationPolicy=foreground","PruneLast=true"]}}}'
      env:
        KUBECONFIG: /tmp/kubeconfig

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/mail-service-backend -n mail-service-prod --timeout=300s
        kubectl rollout status deployment/mail-service-frontend -n mail-service-prod --timeout=300s
      env:
        KUBECONFIG: /tmp/kubeconfig
