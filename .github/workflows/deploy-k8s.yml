name: Deploy to Kubernetes via ArgoCD

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'

env:
  DOCKER_HUB_USERNAME: docker4zerocool

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        else
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          IMAGE_TAG="${{ github.sha }}"
        fi
        
        if [ "$ENVIRONMENT" = "production" ]; then
          NAMESPACE="mail-service-prod"
          ARGOCD_APP_NAME="mail-service-prod"
        else
          NAMESPACE="mail-service-staging"
          ARGOCD_APP_NAME="mail-service-staging"
        fi
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "argocd_app_name=$ARGOCD_APP_NAME" >> $GITHUB_OUTPUT

    - name: Download deployment artifacts
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v3
      with:
        name: deployment-artifacts-${{ github.sha }}
        path: deployment-artifacts/

    - name: Update image tags for ArgoCD
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Update manifests with provided image tag
          sed -i "s|image: docker4zerocool/mail-service-backend:latest|image: docker4zerocool/mail-service-backend:${{ steps.params.outputs.image_tag }}|g" k8s/backend-deployment.yaml
          sed -i "s|image: docker4zerocool/mail-service-frontend:latest|image: docker4zerocool/mail-service-frontend:${{ steps.params.outputs.image_tag }}|g" k8s/frontend-deployment.yaml
        else
          # Use pre-built artifacts
          cp -r deployment-artifacts/k8s/* k8s/
        fi

    - name: Update namespace
      run: |
        find k8s -name "*.yaml" -exec sed -i "s|namespace: mail-service|namespace: ${{ steps.params.outputs.namespace }}|g" {} \;

    - name: Create ArgoCD Application manifest
      run: |
        cat > argocd-app.yaml << EOF
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: ${{ steps.params.outputs.argocd_app_name }}
          namespace: argocd
          finalizers:
            - resources-finalizer.argocd.argoproj.io
        spec:
          project: default
          source:
            repoURL: https://github.com/Bionic-AI-Solutions/mail-service
            targetRevision: ${{ github.ref_name }}
            path: k8s
          destination:
            server: https://kubernetes.default.svc
            namespace: ${{ steps.params.outputs.namespace }}
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
              - CreateNamespace=true
              - PrunePropagationPolicy=foreground
              - PruneLast=true
            retry:
              limit: 5
              backoff:
                duration: 5s
                factor: 2
                maxDuration: 3m
        EOF

    - name: Commit and push ArgoCD configuration
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add ArgoCD application manifest
        git add argocd-app.yaml
        
        # Update image tags in the repository
        git add k8s/
        
        # Commit changes
        git commit -m "Deploy to ${{ steps.params.outputs.environment }} with image tag ${{ steps.params.outputs.image_tag }}" || exit 0
        
        # Push changes
        git push origin ${{ github.ref_name }}

    - name: Trigger ArgoCD sync
      run: |
        echo "üöÄ ArgoCD Application: ${{ steps.params.outputs.argocd_app_name }}"
        echo "üì¶ Image Tag: ${{ steps.params.outputs.image_tag }}"
        echo "üåç Environment: ${{ steps.params.outputs.environment }}"
        echo "üìÅ Namespace: ${{ steps.params.outputs.namespace }}"
        echo ""
        echo "ArgoCD will automatically detect the changes and sync the application."
        echo "You can monitor the deployment in the ArgoCD UI."

    - name: Create deployment summary
      run: |
        echo "## üöÄ ArgoCD Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ steps.params.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`${{ steps.params.outputs.namespace }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** \`${{ steps.params.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**ArgoCD App:** \`${{ steps.params.outputs.argocd_app_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Deployed Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend:** \`docker4zerocool/mail-service-backend:${{ steps.params.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** \`docker4zerocool/mail-service-frontend:${{ steps.params.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY
        echo "2. Check application health and logs" >> $GITHUB_STEP_SUMMARY
        echo "3. Verify services are accessible" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã ArgoCD Commands" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "# Check application status" >> $GITHUB_STEP_SUMMARY
        echo "argocd app get ${{ steps.params.outputs.argocd_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Sync application manually" >> $GITHUB_STEP_SUMMARY
        echo "argocd app sync ${{ steps.params.outputs.argocd_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check application logs" >> $GITHUB_STEP_SUMMARY
        echo "argocd app logs ${{ steps.params.outputs.argocd_app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ ArgoCD deployment to ${{ steps.params.outputs.environment }} initiated!"
          echo "üîç Monitor progress in ArgoCD UI"
        else
          echo "‚ùå ArgoCD deployment to ${{ steps.params.outputs.environment }} failed!"
          echo "Check the logs for details."
        fi